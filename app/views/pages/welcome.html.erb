<%= render 'shared/top_nav' %>
<%# Welcome page shown after successful Google authentication %>
<%# Displays the user's first and last name from their Google profile and their calendar events %>
<% if @user %>
  <div class="container mx-auto px-4 pt-16">
    <h1 class="text-3xl font-bold mb-6">Welcome to Your Dashboard</h1>
    <%# Only show the calendar and modal, no welcome message or sign out button %>
    <div id="calendar"></div>
    <style>
      /* Remove default today border */
      .fc-daygrid-day.fc-day-today {
        border: none !important;
      }
      /* Custom gradient border for hovered or today cell */
      .fc-daygrid-day.fc-custom-hover,
      .fc-daygrid-day.fc-custom-today {
        position: relative;
        z-index: 2;
        cursor: pointer;
      }
      .fc-daygrid-day.fc-custom-hover::before,
      .fc-daygrid-day.fc-custom-today::before {
        content: '';
        position: absolute;
        inset: 0;
        border: 2px solid transparent;
        background: linear-gradient(135deg, #4ade80 0%, #06b6d4 50%, #3b82f6 100%) border-box;
        -webkit-mask: linear-gradient(#fff 0 0) padding-box, linear-gradient(#fff 0 0);
        -webkit-mask-composite: xor;
        mask-composite: exclude;
        border-radius: 4px;
      }
      /* Style calendar events */
      .fc-event {
        background: linear-gradient(135deg, #4ade80 0%, #06b6d4 50%, #3b82f6 100%) !important;
        border: none !important;
        padding: 2px 4px !important;
        margin: 1px 0 !important;
        cursor: pointer !important;
        pointer-events: none !important;
      }
      .fc-event:hover {
        background: linear-gradient(135deg, #4ade80 0%, #06b6d4 50%, #3b82f6 100%) !important;
        color: white !important;
        text-decoration: none !important;
        box-shadow: none !important;
      }
      .fc-event-title {
        font-weight: 500 !important;
        color: white !important;
      }
      /* Media available indicator */
      .fc-event.media-available {
        background: linear-gradient(135deg, #22c55e 0%, #16a34a 100%) !important;
      }
      /* Make the entire day cell clickable */
      .fc-daygrid-day-frame {
        cursor: pointer !important;
      }
      /* Style navigation buttons */
      .fc-button-primary {
        background: linear-gradient(135deg, #4ade80 0%, #06b6d4 50%, #3b82f6 100%) !important;
        border: none !important;
        text-shadow: none !important;
        box-shadow: none !important;
      }
      .fc-button-primary:hover {
        opacity: 0.9 !important;
      }
      /* Remove today button text */
      .fc-today-button {
        display: none !important;
      }
    </style>
    <script>
      // Store all events for quick access
      let allEvents = [];

      // Helper: capitalize each word in a string
      function capitalize(str) {
        return str.replace(/\b\w/g, c => c.toUpperCase());
      }

      // Helper: group events by date and owner (first name)
      function groupEventsByDateAndOwner(events) {
        const grouped = {};
        events.forEach(function(event) {
          const date = event.start ? event.start.slice(0, 10) : null;
          if (!date) return;
          // Extract owner from event title (format: 'title (owner)')
          const match = event.title.match(/\(([^)]+)\)$/);
          const owner = match ? match[1] : 'Unknown';
          if (!grouped[date]) grouped[date] = {};
          if (!grouped[date][owner]) grouped[date][owner] = 0;
          grouped[date][owner] += 1;
        });
        return grouped;
      }

      document.addEventListener('DOMContentLoaded', function() {
        var calendarEl = document.getElementById('calendar');
        var allEvents = [];
        var mediaCheckInterval;

        // Function to check media status for an event
        function checkMediaStatus(eventId) {
          return fetch(`/calendar_events/${eventId}/media_status`)
            .then(response => response.json())
            .then(data => {
              if (data.media_available) {
                // Update the event in allEvents array
                const event = allEvents.find(e => e.id === eventId);
                if (event) {
                  event.recall_transcript = true;
                  event.recall_video_url = data.video_url;
                }
                return true;
              }
              return false;
            })
            .catch(error => {
              console.error('Error checking media status:', error);
              return false;
            });
        }

        // Function to start polling for media availability
        function startMediaPolling() {
          // Clear any existing interval
          if (mediaCheckInterval) {
            clearInterval(mediaCheckInterval);
          }

          // Check media status every 30 seconds
          mediaCheckInterval = setInterval(() => {
            const eventsToCheck = allEvents.filter(event => 
              event.recall_bot_id && !event.recall_transcript
            );

            if (eventsToCheck.length > 0) {
              eventsToCheck.forEach(event => {
                checkMediaStatus(event.id).then(mediaAvailable => {
                  if (mediaAvailable) {
                    // Refresh the calendar to show updated events
                    calendar.refetchEvents();
                  }
                });
              });
            } else {
              // If no events need checking, stop polling
              clearInterval(mediaCheckInterval);
            }
          }, 30000); // 30 seconds
        }

        var calendar = new FullCalendar.Calendar(calendarEl, {
          initialView: 'dayGridMonth',
          height: 650,
          dayMaxEvents: false,
          displayEventTime: false,
          events: function(fetchInfo, successCallback, failureCallback) {
            var startStr = fetchInfo.startStr;
            var endStr = fetchInfo.endStr;
            fetch(`/calendar_events?start=${startStr}&end=${endStr}`)
              .then(response => response.json())
              .then(events => {
                allEvents = events;
                // Group events by date
                const eventsByDate = {};
                events.forEach(function(event) {
                  if (!event.date) return;
                  if (!eventsByDate[event.date]) eventsByDate[event.date] = [];
                  eventsByDate[event.date].push(event);
                });
                // For each date, create separate tiles for upcoming and completed events
                const calendarEvents = Object.keys(eventsByDate).map(function(date) {
                  const events = eventsByDate[date];
                  const upcomingEvents = events.filter(e => !(e.recall_transcript && e.recall_video_url));
                  const completedEvents = events.filter(e => e.recall_transcript && e.recall_video_url);
                  
                  const tiles = [];
                  
                  // Add tile for upcoming events if any exist
                  if (upcomingEvents.length > 0) {
                    tiles.push({
                      id: 'upcoming-' + date,
                      title: upcomingEvents.length + ' upcoming ' + (upcomingEvents.length === 1 ? 'event' : 'events'),
                      start: date,
                      allDay: true
                    });
                  }
                  
                  // Add tile for completed events if any exist
                  if (completedEvents.length > 0) {
                    tiles.push({
                      id: 'completed-' + date,
                      title: completedEvents.length + ' Completed',
                      start: date,
                      allDay: true,
                      classNames: ['media-available']
                    });
                  }
                  
                  return tiles;
                }).flat().filter(event => event !== null); // Flatten array and remove null entries
                successCallback(calendarEvents);
                
                // Start polling for media availability
                startMediaPolling();
              });
          },
          dayCellDidMount: function(info) {
            if (info.isToday) {
              info.el.classList.add('fc-custom-today');
            }
            info.el.addEventListener('mouseenter', function() {
              document.querySelectorAll('.fc-daygrid-day').forEach(function(cell) {
                cell.classList.remove('fc-custom-hover');
                cell.classList.remove('fc-custom-today');
              });
              info.el.classList.add('fc-custom-hover');
            });
          },
          dateClick: function(info) {
            const events = allEvents.filter(event => {
              // Only include events that don't have completed recordings
              return event.start.startsWith(info.dateStr) && 
                     !(event.recall_transcript && event.recall_video_url);
            });
            
            if (events.length > 0) {
              // Redirect to upcoming page for the selected date
              window.location.href = '/upcoming?date=' + info.dateStr;
            } else {
              // Show the "No events" alert
              alert('No upcoming events for this day.');
            }
          }
        });
        calendar.render();
      });

      // Show modal with all events for a day, sorted by time (titles only)
      function showDayModal(dateStr, events) {
        // Use event.date if available, otherwise fallback to dateStr
        let modalDate = (events.length > 0 && events[0].date) ? events[0].date : dateStr;
        // Format modalDate as 'May 13, 2025' if in YYYY-MM-DD
        if (/^\d{4}-\d{2}-\d{2}$/.test(modalDate)) {
          const d = new Date(modalDate);
          modalDate = d.toLocaleDateString(undefined, { year: 'numeric', month: 'long', day: 'numeric' });
        } else {
          modalDate = new Date(modalDate).toDateString();
        }
        document.getElementById('modalDate').textContent = modalDate;
        var list = document.getElementById('modalEventsList');
        list.innerHTML = '';
        if (events.length === 0) {
          list.innerHTML = '<li>No events for this day.</li>';
        } else {
          events.forEach(function(event) {
            var li = document.createElement('li');
            // Prefer 24h time fields if available
            var time = (event.start_time_24h && event.end_time_24h) ? (event.start_time_24h + '-' + event.end_time_24h) : (event.start ? formatTime(event.start) : '');
            li.textContent = time + ' | ' + event.title;
            li.className = 'px-2 py-1 rounded';
            list.appendChild(li);
          });
        }
        document.getElementById('dayModal').classList.remove('hidden');
      }
      // Close the day modal
      function closeDayModal() {
        document.getElementById('dayModal').classList.add('hidden');
      }
      // Format time for display
      function formatTime(date) {
        if (!date) return '';
        var d = (date instanceof Date) ? date : new Date(date);
        return d.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
      }
    </script>
  </div>
<% end %> 